import argparse
import os,sys
import pickle
import pandas as pd
from pathlib import Path

from fragfold.src.colabfold_create_msa import createIndividualMSAsFullLengthFragment,createIndividualMSAsFullLengthFragmentHeteromeric

def main(args):
    # In either mode, there will be information detailing the fragments
    fragment_a3m = args.fragment_a3m_input
    fragment_name = args.fragment_parent_name if args.fragment_parent_name != "" else Path(fragment_a3m).stem 
    fragment_start_range = (args.fragment_ntermres_start,args.fragment_ntermres_final)
    fragment_length = args.fragment_length
    protein_copies = args.protein_copies
    fragment_single_sequence = args.fragment_single_sequence
    fragment_shuffle_sequence = args.fragment_shuffle_sequence
    print(fragment_single_sequence,fragment_shuffle_sequence)

    protein_range = (args.protein_ntermres,args.protein_ctermres)

    if not args.protein_a3m_input or args.protein_a3m_input == args.fragment_a3m_input:
        # Create monomeric interaction MSAs: fragments of protein A + full-length protein A
        msa_path_list = createIndividualMSAsFullLengthFragment(fragment_a3m,
                                                                fragment_name,
                                                                protein_range,
                                                                fragment_start_range,
                                                                fragment_length,
                                                                protein_copies,
                                                                fragment_single_sequence,
                                                                fragment_shuffle_sequence)
    else:
        # Create heteromeric interaction MSAs: fragments of protein A + full-length protein B

        # In heteromeric interaction mode, we parse more arguments
        fulllengthprotein_a3m_path = args.protein_a3m_input
        fulllengthprotein_name = args.protein_name if args.protein_name != "" else Path(fulllengthprotein_a3m_path).stem
        msa_path_list = createIndividualMSAsFullLengthFragmentHeteromeric(fulllengthprotein_a3m_path,
                                                                        fulllengthprotein_name,
                                                                        fragment_a3m,
                                                                        fragment_name,
                                                                        protein_range,
                                                                        fragment_start_range,
                                                                        fragment_length,
                                                                        protein_copies,
                                                                        fragment_single_sequence,
                                                                        fragment_shuffle_sequence)
    with open("a3m_list.txt","w") as file:
        for path in msa_path_list:
            file.write(str(path)+"\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog='create_fragment_msa',
        description='For processing MSAs into fragment + full-length protein MSAs'
    )
    parser.add_argument(
        "--fragment_a3m_input",
        type=Path,
        help="The a3m file (i.e. MSA) generated by colabfold",
        required=True
    )
    parser.add_argument(
        "--fragment_ntermres_start",
        type=int,
        help="Fragments will be defined starting from this residue in the protein",
        default=-1,
    )
    parser.add_argument(
        "--fragment_ntermres_final",
        type=int,
        help="The last fragment to be derived from the protein will start from this residue",
        default=-1,
    )
    parser.add_argument(
        "--fragment_length",
        type=int,
        help="The residue length of the fragments",
        default=30
    )
    parser.add_argument(
        "--protein_a3m_input",
        type=Path,
        help="The a3m file (e.g. MSA) that defines the full-length protein",
        default=None
    )
    parser.add_argument(
        "--protein_ntermres",
        type=int,
        help="The first residue of the protein",
        default=-1
    )
    parser.add_argument(
        "--protein_ctermres",
        type=int,
        help="The last residue of the protein",
        default=-1
    )
    parser.add_argument(
        "--protein_copies",
        type=int,
        help="The number of copies of the full-length protein",
        default=1
    )
    parser.add_argument(
        "--fragment_single_sequence",
        action='store_true',
        help="If true, will remove the MSA for the fragment and model using the query sequence",
    )
    parser.add_argument(
        "--fragment_shuffle_sequence",
        action='store_true',
        help="If true, will remove the MSA for the fragment and model using the shuffled query sequence",
    )
    parser.add_argument(
        "--fragment_parent_name",
        type=str,
        default="",
        help="If given, the fragment parent will be renamed to this. Otherwise the name of the .a3m file is used",
    )
    parser.add_argument(
        "--protein_name",
        type=str,
        default="",
        help="If given, the protein will be renamed to this. Otherwise the name of the .a3m file is used",
    )
    args = parser.parse_args()
    main(args)